CodeInfo(
1 ──       Core.NewvarNode(:(@_3))
│          Core.NewvarNode(:(y))
│          Core.NewvarNode(:(n))
│          absx = Base.Math.abs(x)
│    %5  = absx
│    %6  = ($(Expr(:static_parameter, 1)))(Base.Math.pi)
│    %7  = %6 / 4
│    %8  = %5 < %7
└───       goto #5 if not %8
2 ── %10 = absx
│    %11 = Base.Math.eps($(Expr(:static_parameter, 1)))
│    %12 = ($(Expr(:static_parameter, 1)))(2.0)
│    %13 = %11 / %12
│    %14 = Base.Math.sqrt(%13)
│    %15 = %10 < %14
└───       goto #4 if not %15
3 ── %17 = ($(Expr(:static_parameter, 1)))(1.0)
└───       return %17
4 ── %19 = Base.Math.cos_kernel(x)
└───       return %19
5 ── %21 = Base.Math.isnan(x)
└───       goto #7 if not %21
6 ── %23 = ($(Expr(:static_parameter, 1)))(Base.Math.NaN)
└───       return %23
7 ── %25 = Base.Math.isinf(x)
└───       goto #9 if not %25
8 ── %27 = Base.Math.cos_domain_error(x)
└───       return %27
9 ── %29 = Base.Math.rem_pio2_kernel(x)
│    %30 = Base.indexed_iterate(%29, 1)
│          n = Core.getfield(%30, 1)
│          @_3 = Core.getfield(%30, 2)
│    %33 = Base.indexed_iterate(%29, 2, @_3)
│          y = Core.getfield(%33, 1)
│          n = n & 3
│    %36 = n == 0
└───       goto #11 if not %36
10 ─ %38 = Base.Math.cos_kernel(y)
└───       return %38
11 ─ %40 = n == 1
└───       goto #13 if not %40
12 ─ %42 = Base.Math.sin_kernel(y)
│    %43 = -%42
└───       return %43
13 ─ %45 = n == 2
└───       goto #15 if not %45
14 ─ %47 = Base.Math.cos_kernel(y)
│    %48 = -%47
└───       return %48
15 ─ %50 = Base.Math.sin_kernel(y)
└───       return %50
)
